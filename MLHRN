{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8230157,"sourceType":"datasetVersion","datasetId":4797116}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-05-03T20:33:30.504465Z","iopub.execute_input":"2024-05-03T20:33:30.504899Z","iopub.status.idle":"2024-05-03T20:33:30.516153Z","shell.execute_reply.started":"2024-05-03T20:33:30.504865Z","shell.execute_reply":"2024-05-03T20:33:30.515008Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"/kaggle/input/chamadosmanut/chamados5train.csv\n/kaggle/input/chamadosmanut/chamados5tEST.csv\n/kaggle/input/chamadosmanut/chamados6tEST.csv\n/kaggle/input/chamadosmanut/chamados3train.csv\n/kaggle/input/chamadosmanut/chamados3test.csv\n/kaggle/input/chamadosmanut/chamados32test.csv\n/kaggle/input/chamadosmanut/chamados4test.csv\n/kaggle/input/chamadosmanut/chamados4train.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import FeatureUnion, Pipeline\nfrom sklearn.compose import ColumnTransformer\nimport gensim.downloader as api\n\n# Carregar o modelo Word2Vec pré-treinado (mais leve)\nword2vec_model = api.load(\"glove-wiki-gigaword-50\")\n\n# Carregar os dados\ntrain_data = pd.read_csv(\"/kaggle/input/chamadosmanut/chamados3train.csv\", delimiter=\";\", encoding='latin-1')\n\n# Dividir os dados em conjuntos de treinamento e teste\nX_train, X_test, y_train_espec, y_test_espec, y_train_prior, y_test_prior, y_train_loc, y_test_loc = train_test_split(\n    train_data[[\"DS_SERVICO\", \"CD_LOCALIDADE\"]], \n    train_data[\"CD_ESPEC\"], \n    train_data[\"PRIORIDADE\"],\n    train_data[\"CD_LOCALIDADE\"],\n    test_size=0.2, \n    random_state=42)\n\n# Inicializar o vetorizador TF-IDF\ntfidf_vectorizer = TfidfVectorizer()\n\n# Inicializar o scaler\nscaler = StandardScaler()\n\n# Pipeline para aplicar TF-IDF na descrição do serviço e escalar o CD_LOCALIDADE\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('tfidf', tfidf_vectorizer, 'DS_SERVICO'),\n        ('scaler_loc', scaler, ['CD_LOCALIDADE'])\n    ],\n    remainder='passthrough'\n)\n\n# Pipeline completo com pré-processamento e classificador para especialidade\npipeline_espec = Pipeline([\n    ('preprocessor', preprocessor),\n    ('classifier', RandomForestClassifier(n_estimators=100, random_state=42))\n])\n\n# Treinar o modelo para especialidade\npipeline_espec.fit(X_train, y_train_espec)\n\n# Pipeline completo com pré-processamento e classificador para prioridade\npipeline_prior = Pipeline([\n    ('preprocessor', preprocessor),\n    ('classifier', RandomForestClassifier(n_estimators=100, random_state=42))\n])\n\n# Treinar o modelo para prioridade\npipeline_prior.fit(X_train, y_train_prior)\n\nwhile True:\n    # Solicitar a descrição do serviço ao usuário\n    descricao_servico = input(\"Digite a descrição do serviço (ou 'cancelar' para sair): \")\n    \n    # Verificar se o usuário quer sair\n    if descricao_servico.lower() == \"cancelar\":\n        print(\"Saindo...\")\n        break\n    \n    # Solicitar o número da localidade ao usuário\n    cd_localidade = int(input(\"Digite o número da localidade: \"))\n    \n    # Pré-processar a entrada do usuário\n    entrada_usuario = pd.DataFrame({\"DS_SERVICO\": [descricao_servico], \"CD_LOCALIDADE\": [cd_localidade]})\n    \n    # Fazer a previsão para especialidade\n    previsao_espec = pipeline_espec.predict(entrada_usuario)[0]\n    print(\"A previsão para especialidade é:\", previsao_espec)\n\n    # Fazer a previsão para prioridade\n    previsao_prior = pipeline_prior.predict(entrada_usuario)[0]\n    print(\"A previsão para prioridade é:\", previsao_prior)\n    \n    # Verificar se a condição especial é atendida\n    if cd_localidade in [2636, 2051, 2267, 2084, 2085, 2086, 2087, 2088, 2105, 2107] and previsao_espec == 5:\n        previsao_espec = 13\n        previsao_prior = \"Muito Alta\"\n        print(\"Condição especial aplicada!\")\n    \n    # Determinar o valor de CD_OFICINA de acordo com a previsão de CD_ESPEC\n    if previsao_espec == 1:\n        previsao_ofic = 146\n    elif previsao_espec == 2:\n        previsao_ofic = 135\n    elif previsao_espec == 3:\n        previsao_ofic = 162\n    elif previsao_espec == 4:\n        previsao_ofic = 151\n    elif previsao_espec == 5:\n        previsao_ofic = 152\n    elif previsao_espec == 7:\n        previsao_ofic = 130\n    elif previsao_espec == 10:\n        previsao_ofic = 162\n    elif previsao_espec == 13:\n        previsao_ofic = 137\n    elif previsao_espec == 14:\n        previsao_ofic = 162\n    elif previsao_espec == 16:\n        previsao_ofic = 133\n    elif previsao_espec == 18:\n        previsao_ofic = 162\n    elif previsao_espec == 19:\n        previsao_ofic = 179\n    elif previsao_espec == 20:\n        previsao_ofic = 138\n    else:\n        previsao_ofic = \"Não encontrado\"\n    \n    print(\"Previsão final para especialidade:\", previsao_espec)\n    print(\"Previsão final para prioridade:\", previsao_prior)\n    print(\"Previsão final para CD_OFICINA:\", previsao_ofic)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-03T20:58:20.493140Z","iopub.execute_input":"2024-05-03T20:58:20.493573Z"},"trusted":true},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdin","text":"Digite a descrição do serviço (ou 'cancelar' para sair):  elevador quebrado\nDigite o número da localidade:  2336\n"},{"name":"stdout","text":"A previsão para especialidade é: 20\nA previsão para prioridade é: Muito Baixa\nPrevisão final para especialidade: 20\nPrevisão final para prioridade: Muito Baixa\nPrevisão final para CD_OFICINA: 138\n","output_type":"stream"},{"output_type":"stream","name":"stdin","text":"Digite a descrição do serviço (ou 'cancelar' para sair):  \tSOLICITO CIÊNCIA PARA SAÍDA DE UMA BALANÇA ANTROPOMÉTRICA PAT. 5345, PARA MANUTENÇÃO COM FORNECEDOR AUTORIZADO PELO IPEM-SP. EMPRESA: BALANÇAS VILELA ENDEREÇO: AV. RIO BRANCO, 591 INDAIÁ - CARAGUATATUBA - SP CEP: 11665-600  TEL.12 991801145 ADRIANO\nDigite o número da localidade:  2267\n"},{"name":"stdout","text":"A previsão para especialidade é: 13\nA previsão para prioridade é: Muito Baixa\nPrevisão final para especialidade: 13\nPrevisão final para prioridade: Muito Baixa\nPrevisão final para CD_OFICINA: 137\n","output_type":"stream"},{"output_type":"stream","name":"stdin","text":"Digite a descrição do serviço (ou 'cancelar' para sair):  \tSOLICITO RETIRADA DE FREEZER DA SALA DE COORDENAÇÃO DA ONCOLOGIA PARA COPA DE NUTRIÇÃO CLINICA\nDigite o número da localidade:  2060\n"},{"name":"stdout","text":"A previsão para especialidade é: 14\nA previsão para prioridade é: Muito Baixa\nPrevisão final para especialidade: 14\nPrevisão final para prioridade: Muito Baixa\nPrevisão final para CD_OFICINA: 162\n","output_type":"stream"}]}]}